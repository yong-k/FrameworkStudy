■■■ Spring Framework 이해하기 ■■■

○ 개요

   1. Framework
      어플리케이션을 구현하고 관리하는 환경(틀, 약속)
				       ==============

   2. Spring Framework
      (우리는 얘한테 전달받은 설정 정보를 전달한다. 
       전달만 해주면 Spring Framework 가)
      전달받은 설정 정보에 의해
      (Spring Framework가 객체를 생성해서 관리하려면→)어플리케이션을 구성하고
      객체를 생성, 관리하는 주체(→ Spring)
   
현재 개발자들이 모든 공장이 돌아가는 벽돌 하나하나 까지 다 분석한 개발자 1도 없음
자동차 타는거랑 마찬가지로, 개략적으로 알면 된다.
우리가 엔진/오일에 관한 모든 정보 다 알아야 다 파악해야 자동차 탈 수 있는 거 아니다.
스프링을 처음부터 그렇게 뜯어보려고 접근하면 지쳐서 아무 것도 못한다.
우리는 앞으로 들여다볼 부분만 선택적으로 들여다보면서 스프링 공부할 것이다.
=> 처음 스프링 공부할 때는 스프링 책 사서 정독하면서 이해해야 한다는 압박감 있는데,
   절대 그렇게 할 필요 없다.

- spring framework 에도 container 라는 개념이 있다.


○ 스프링 프레임워크(Spring Framework)의 개념

		개인이 사용하는 어플리케이션의 규모가 아니라
		협업에 특화되어 있는 것
		 ------------
   스프링은 자바 엔터프라이즈 어플리케이션 개발에 사용되는
   어플리케이션 프레임워크

   어플리케이션 프레임워크는 어플리케이션 개발을 빠르고 효율적으로 할 수 있도록 
   어플리케이션의 바탕이 되는 틀과 공통 프로그래밍 모델, 그리고 기술 API 등을 제공해준다.
   → 그 약속/틀 지키면서 해야하니까 프레임워크라면 응당 지원/제공해줘야 하는 것

	+) 자바가 탄생이 늦은 프로그래밍 언어이듯,
 	          다른 언어 장/단점 살펴보고 나옴
 	   스프링 프레임워크도 프레임워크 세계에서 등장이 매우 늦음
 	   '원래 쓰던거보다 이게 더 좋으니까 이걸로 갈아타~' 가 아니라
 	   '원래 쓰던거랑 같이 써봐~ 얘가 그거 더 편하게 쓸 수 있게 도와줘'
 	   → [[유연성]] : 스프링의 핵심 철학/가치 
                          (스프링이 갖고 있는 모든 기술에 녹아있는 철학)
                          스프링이 시작 점유율 엄~청 많이 차지할 수 있었던 이유
 	   원래 A에는 B만 꽂을 수 있었는데, 
 	   스프링프레임워크가 등장하면서는 B,C,D,E 다 꽂을 수 있게 되는 형식
 	   → 말만 번지르르하게 해놓고 실제로는 안지키는 것들 많은데, 스프링은 그렇지 않음
              스프링이 유기농판다고 광고한 식당이라면,
 	      그 음식을 담는 그릇도, 재료 가져오는 사람도 친환경 인증받았고,
 	      물도 환경호르몬 하나도 안 나오고, 직원이 신는 신발도 친환경 유기농 신발 등등
 	      이런 느낌!!ㅋㅋㅋ 신뢰도 ↑
 	      

	+) JSP와 마찬가지로, 스프링도 의미 유연하게 생각하기!
           JSP/Servlet보다 훨씬 큰 개념이라 더 하면 더 함
 	   서블릿 컨테이너도 스프링 컨테이너 안에 있는 개념

	   스프링
	   =스프링 컨테이너
	   =스프링이 제공하는 문법
	   =스프링 약속 기반으로 갖춰지는 환경

   - 어플리케이션의 기본 틀 → 스프링 컨테이너(=스프링)

				   공장들이 모여있는 '공단' 생각하면 됨
				   ----------------------
     스프링은 스프링 컨테이너 또는 어플리케이션 컨텍스트 라고 불리는
     스프링 런타임 엔진을 제공한다.
     스프링 컨테이너는 설정 정보를 참고해서
     어플리케이션을 구성하는 오브젝트(객체)를 생성하고 관리한다.
     스프링 컨테이너는 독립적으로 동작할 수도 있지만
     보통... 웹 모듈에서 동작하는 서비스나 서블릿으로 등록해서 사용한다.

	+) 설정정보 전달하는 방법 → xml, annotation 있다.
 	   실무에서는 annotation 방식 많이 사용
 	   그러나, xml로 전달하는 게 훨씬 유연하다.

     스프링을 사용하려면 먼저 스프링 컨테이너를 다루는 방법과
     스프링 컨테이너가 어플리케이션 오브젝트를 이용할 수 있도록
     설정 정보를 작성하는 방법을 알아야 한다.

     ==> 설정 정보에 의해 어플리케이션을 구성하고
         객체를 생성, 관리하는 주체      
     

   - 공통 프로그래밍 모델 → IoC/DI, 서비스 추상화, AOP(관점지향프로그래밍)
     
     프레임워크라는 어플리케이션을 구성하는 오브젝트(객체)가
     생성되고 동작하는 방식에 대한 틀을 제공해줄 뿐 아니라
     어플리케이션 코드가 어떻게 작성되어야 하는지에 대한 기준도 제시한다.
     이런 틀을 보통 프로그래밍 모델이라고 한다.
     스프링은 세 가지 핵심 프로그래밍 모델을 제공한다.

	┌→ 스프링 컨테이너 안에 IoC 컨테이너 있다.
	---
     ① IoC/DI
        오브젝트 생명 주기와 의존 관계에 대한 프로그래밍 모델이다.
        스프링은 유연하고 확장성이 뛰어난 코드를 만들 수 있게 도와주는
        객체 지향 설계 원칙과 디자인 패턴의 핵심 원리를 담고 있는
        ★★ IoC/DI 를 프레임워크의 핵심 근간으로 삼고 있다. ★★
	=========================================================
        스프링 프레임워크에서 동작하는 코드는
        IoC/DI 방식을 따라 작성되어야 스프링이 제공하는 가치를 제대로 누릴 수 있다.
        스프링이 직접 제공하는 모든 기술과 API, 심지어 컨테이너까지도
        스프링을 바르게 이해하고 효율적으로 사용하는 데
        기본이 되며 가장 중요한 기술이다.

        ·IoC → - 객체 관리의 주체
                 - Inversion of Control : 제어의 역전(역제어)
                 - 객체 생성과 관리를 직접 하는 것이 아니라
                   외부(컨테이너)에서 만들어진 오브젝트(객체)를
                   제공받는 입장이 되는 것
                 - Bean : 스프링이 관리하는 대상
                 - Bean Factory : 객체를 관리하는 주체 → bean을 찍어내고 관리하는 '공장'
                   일반적으로 이 기능을 확장한 Application Context 를 사용하게 된다.
                 - Application Context : Bean Factory 의 확장 버전 → '공단'
                 - 설정 정보 : 어떤 객체들이 관리 대상인지 설정한 정보
                   XML, Annotation 등을 이용한다.
                   객체 의존 관계도 표현되어 있다.
                 - IoC 컨테이너 : 객체를 등록하고 관리하는 공간
		   → 얘를 가리켜서 '스프링', '스프링컨테이너'라고도 한다.

	    -----------------------------------------------------------------------------
	     +) annotation: 코드레벨에서 바꿔쓰지 않아도 돼서 사용자 입장에서 편함
			    컴파일하고 실행과정에서 내용 바꿀 수 없음
			    그냥 테트리스 게임팩이면 테트리스만 가능!!
			ex. '야 스프링 이 슬롯에는 휴가계획서 꽂아서 객체 생성해줘'
	
		XML: 컴파일하고 실행과정에서 바꿀 수 있음. 배포한 뒤에도
		     다른 게임팩 꽂아서, 마리오/테트리스/보글보글 등 게임 여러가지 가능
		     → 스프링의 철학인 『유연성』과 맞음
			ex. '야 스프링 xml에 적어둔 객체를 이곳에 꽂아줘'
			→ 프로그램 작성/배포 후에도, 
                           xml에 적은 객체 수정하면 여러 가지 꽂을 수 있음
	 		→ 이게 유연한 것이다.

		==> 가장 좋은 건 같이 쓰는거!! 
		annotation: '책임자적는칸' 꽂아서 객체 생성해줘  (공통부분)
		xml:        '야 스프링 xml 에 적어둔 객체를 이곳에 꽂아줘~'
		annotation: '직인찍는칸' 꽂아서 객체 생성해줘	 (공통부분)
	    -----------------------------------------------------------------------------

        ·DI → - 객체를 관리하는 방법
                - 자바에서 객체를 생성하고 관리하는 방법은
                  모두 has-a 관계를 통해 처리해 왔기 때문에
		       ----------
			└→ 포함된 관계

                  이들은 모두 의존 관계가 치밀하고 밀접한 상황일 수 밖에 없다.
                  때문에... 이러한 강한 결합 상태는
                  유연성을 떨어뜨리는 결과를 초래하게 된다.
	  		  → ex. 모터를 고치려면 선풍기 다 뜯어고쳐야 한다.
			  → MVC 와 엄청나게 맞아 떨어진다.
			     '난 너 아니면 안돼' 이거 없는 게 유연한거!!
                  이러한 결합 상태를 풀어주는 과정(방법)이 바로 DI 이다.
                - Dependency Injection : 의존성 주입(의존관계 주입)
                - 의존관계 주입 : 의존 객체를... 이 객체를 사용하는 객체에...
                  외부에서 주입하는 액션(상태)
		  → ex. 모터를...모터를 사용하는 선풍기에게...주입하는 액션
                - 의존관계 : A 가 실행되기 위해서 B 를 필요로 하는 상태
                - 의존객체 : A 입장에서 의존 객체는 B (즉, 주입되는 객체)
			     → ex. '선풍기' 입장에서 의존 객체는 '모터'

                ※ 우선... A 객체에 B 객체의 주소를 넘겨줌으로써
                   B 객체를 사용하게 된다면...
                   A 객체는 여전히 B 객체를 사용하는 데는 문제가 없고,
                   B 객체는 A 객체와의 결합 상태가 느슨해진다고 할 수 있다.
			
			+) 선풍기한테 모터를 직접 꽂아놓는 게 아니라, 
			   '마포구 서교동' 에 있는 거 꽂아줘 라고 한다면,
			   마포구 서교동에 모터가 있으면 모터를, 
			   토끼가 있으면 토끼를, 사람이 있으면 사람을 꽂는거
			   → 그럼 결합 상태 느슨해 질 수 있다.

                   이 때, 넘겨주는 방법은 생성자 또는 setter() 메소드를
                   이용하는 방법이 있다.
                
                   DI 를 위해 객체는 작은 객체부터 생성해서
                   큰 객체를 DI 하는 과정을 반복적으로 거치게 된다.
			     ---
			  의존성 주입

			+) 선풍기 만들 때, 선풍기 부터 만드는 거 아니라,
			   선풍기의 나사 - 코일 - 자석 만들고 하는 거!

                   이 때, 완성된 오브젝트(객체)가 만들어질 때까지
                   객체를 관리할 주체가 필요하게 되는데
                   그 역할을 하는 것이 바로 컨테이너인 것이다. 
		   → 그 관리를 스프링한테 맡기는 거


     ② 서비스 추상화
        스프링을 사용하면 환경이나 서버, 특정 기술에 
        종속되지 않고 이식성이 뛰어나며 유연한 어플리케이션을
					====== 
        만들 수 있게 되는데, 이를 가능하게 해 주는 것이 바로 서비스 추상화이다.
        구체적인 기술과 환경에 종속되지 않도록
        유연한 추상 계층을 두는 방법이다.


     ③ AOP(Aspect Oriented Programming))     
 
 				  여기저기 흩어져서     
				     ---------
        이 AOP 는 어플리케이션 코드에 산재해서 나타나는 부가적인 기능을
        독립적인 상태로 모듈화하는 프로그래밍 모델이다.
        스프링은 AOP 를 이용해서 다양한 엔터프라이즈 서비스를
        적용하고도 깔끔한 코드를 유지할 수 있게 해준다.
	→ 각각 다 있으면 관리하기 힘들텐데 그걸 스프링이 도와주는 개념


   - 기술 API 
     
     스프링은 엔터프라이즈 어플리케이션 개발의 다양한 영역에
     바로 활용될 수 있는 방대한 양의 기술 API 를 제공한다.
			 ====================
     UI 작성은 물론이고, 웹 프리젠테이션 계층, 비즈니스 서비스 계층
     , 기반 서비스 계층, 도메인 계층, 데이터 액세스 계층 등에서
     필요한 주요 기술을 스프링에서 일관된 방식으로 사용할 수 있도록
     지원해주는 전략 클래스를 제공한다.
     스프링이 제공하는 API 와 지원 기술은
     =====================================
     모두 스프링 프로그래밍 모델에 따라 작성되었기 때문에
     =====================================================
     이를 가져다 쓰는 것만으로도 
     ============================
     스프링 프로그래밍 모델을 코드에 자연스럽게 적용할 수 있다.
     ===========================================================
     → ex. 스프링이 가져다주는 그릇, 주방용품만 쓰더라도 친환경 유기농 제품이 된다는 뜻!

     스프링의 모든 기술은 표준 자바 엔터프라이즈 플랫폼(JavaEE)
     에 기술을 두고 있다.
     표준 기술과 더불어 유명 오픈 소스 기술과 주요 상용 기술에 대한
     지원 기능도 다양하게 제공된다.



↓ 쌤 설명하는 거 받아 적어놓은 거
==============================================================================================
   - 어플리케이션의 기본 틀 → 스프링 컨테이너(=스프링)
     
   - 공통 프로그래밍 모델 → Ioc/DI, 서비스 추상화, AOP(관점지향프로그래밍)
----------------------------------------------------------------------------------------------
스프링에서 가장 중요한 개념이자 철학
1. IoC(Inversion of Control) : 컨트롤이 역전됐다.
	class 선풍기 {
	
		기능()
		{
			모터 ob = new 모터();
		}
	}
	=> 모터가 선풍기에 기생하고 있는 것 같은 모습이다.
 	   선풍기가 당당하고, 모터가 초라한 모습
	===> 선풍기 덩치 큰 클래스 설계하면서, 그 안에 필요한 작은 객체들을 만들어가는 형태

	=> 원래는 이거였는데,
		│
		↓
	class 선풍기 {
	
		기능()					모터 ob = new 모터();
		{
			
		}
	}
	모터 ob 객체를 선풍기 class 안에서가 아니라 밖에서 생성함
	=> 스프링컨테이너 안에서 이런 개념으로 만들어진다.
	=> 이렇게 되면 아쉬운 건 → 선풍기
	=> 선풍기는 껍데기 뿐인게 되어버린다. 
	   모터가 당당하고, 선풍기가 의존적인/초라한 모습이다.
	====> 컨트롤이 역전!
	===> 작은부품 먼저 만들어서 큰 거에 끼우고 하는 형태로 조립 (like 레고) 
             로봇 조립할 때 주먹먼저 만들고 팔1부품에 붙이고 팔2부품 붙이는 형식


2. DI(Dependency Injection)  : 의존하는 무언가를 주입한다.
IoC와 DI가 같이 다니는 개념인 이유
→ 부품 만들어놓은 다음에는, (→ 밖에서 객체 만들어 놓은 다음에는)
   선풍기가 의존하는 모터(의존객체)를
   선풍기에 주입해줘야 한다.
→ 좋은 모터 달리면 좋은 선풍기
   모터 없으면 작동 X
   모터의 상태에 따라 선풍기의 질 달라짐
→ 객체가 만들어지는 공간도, 주입되는 공간도 다 → Spring Container 안이다.
   만드는 주체/만들어지는 공간/주입되는 공간 전부 다 → Spring
----------------------------------------------------------------------------------------------
<서비스 추상화>
기능() {	
   [모터 ob = new 모터();] 
}
라고 되어있으면 그 자리에는 모터만 들어올 수 있는 거
그런데, 그 [] 자리에 그냥 네모 모양으로 구멍만 뚫어놓으면

네모로 생긴 모터는 다 끼워넣을 수 있음
동그라미로 생긴 모터는 못 끼워넣겠지만 ! 

 	│ㅇ 특정 자리에 김정용 앉을 수 있다 → 해놓으면 나만 앉을 수 있음
 	│ㅇ 20세 여성만 앉을 수 있다. → 나 뿐 아니라, 그냥 20세 여성 다 앉을 수 있음
 	│ㅇ 사람 앉을 수 있다. → 사람이면 다 앉을 수 있다.
 	↓ㅇ 동물 앉을 수 있다. → 사람이면 다 앉을 수 있다.
   	     ==> 점점 추상화되어가고 있는 거
	     
======> 이게 [[서비스 추상화]]

해당 자리에 <Rect ob = new Rect();> 해놓으면 Rect 클래스 인스턴스만 올 수 있는데,
그냥 <사각형 인터페이스> 라고 해두면
	Rect implements 사각형
	Circle implements 사각형
	Angle implements 사각형
얘네 다 저 자리에 들어갈 수 있게 된다.

======> 이게 [[서비스 추상화]]

----------------------------------------------------------------------------------------------
	+) 자바는 OOP (객체지향언어)
<AOP> : Aspect Oriented Programming : 관점지향프로그래밍
	------
	관점
--------	----------	----------	-----------	-----------
책임자적는칸	책임자적는칸	책임자적는칸	책임자적는칸	책임자적는칸	→ 사전보조업무

분기보고서	휴가계획서	영업보고서	매출보고서	사직서		.... → 주업무

직인찍는곳	직인찍는곳	직인찍는곳	직인찍는곳	직인찍는곳	→ 사후보조업무
--------	----------	----------	-----------	-----------

[책임자적는칸]과 [직인찍는곳]은 공통업무/보조업무로 하는 거 다 똑같음
-------------
책임자적는칸

직인찍는곳
-------------
그래서 이런식으로 미리 만들어놓는것
사전보조업무 / 사후보조업무 따로 만들어놓건, 그냥 같이 만들건 그건 마음

종(↓)으로 자르지 않고 횡(→)으로 자름 → cross-cutting

관점에 따라 [주업무] 와 [보조업무] 나누고,
보조업무는 미리 만들어놓고,
주업무는 내용 다르니까 밖에서 만들고 주입하는 형태로!

주업무 : main/primary concern
보조업무: cross-cutting concern

+) oop aop는 서로 나뉘어져서 둘 중 하나 취사선택 해야되는 개념 아니라
   서로 도와주는 개념!
   aop : oop를 잘 지원해주기 위해서 녹아있는 또 다른 철학

----------------------------------------------------------------------------------------------

   - 기술 API → 무궁무진하게 많음
     	      → 크게 만들어 쓸 일 없고, 어지간하면 가져다 쓰면 된다.
     
==============================================================================================


○ 스프링 프레임워크(Spring Framework)의 주요 기능과 특징
   
   1. 경량 컨테이너
      자바 객체를 담고, 이들 자바 객체의 생성과 소멸의 
      라이프 사이클을 관리
      → 컨테이너에서 모든 거 처리하는데도 불구하고 경량!
	 너무 무거워서 뻗어버리면 안되니까

   2. DI(Dependency Injection)
      의존성(관계) 주입(삽입)을 지원
      설정 파일을 통해 객체간의 의존 관계를 정의

   3. AOP(Aspect Oriented Programming) 지원
      관점 지향 프로그래밍을 지원
      여러 모듈에 공통적으로 쓰이는 기능을 분리하여 
      각 모듈에 적용하는 것이 가능
      → 실무에서 IoC, DI 만큼 중요하게 다뤄지지는 않음

	맛없는 요거트
	  ------
   4. POJO(Plane Old Java Object) 지원
      가장 기본적인 자바 객체를 지원하여
      기존 작성 코드의 유지성을 향상
      → 보통의 자바(빈) 객체
         - 상속(x)       → plane이기 때문에
         - 인터페이스(x) → old 이기 때문에

   5. 트랜잭션 처리
      JDBC 나 JTA 를 사용하는 설정 파일을 통해
      트랜잭션을 관리하여 동일한 코드를 여러 환경에서 
      사용하도록 하는 것이 가능

   6. 다양한 프레임워크와의 조합
      myBatis(iBatis), Hivernate, Struts, Struts2, JPA, JDO, Quartz 등
      다른 프레임워크 뿐 아니라 사용자가 만든 프레임워크와의 연동성을 제공한다.


※ 스프링 프레임워크(Spring Framework) 에서 가장 중요한 개념
   
   - DI(Dependency Injection, 의존성 주입, 의존관계 주입)
     : 객체를 생성하고 관리하는 의존성에 대해서
       어떻게 처리하는가에 대한 개념

   - IoC(Inversion of Control, 제어의 역전)
     : 인스턴스의 생성부터 소멸까지 인스턴스 생명주기 관리를 
       컨테이너가 대신하는 개념
      
      
































   